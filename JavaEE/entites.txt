
-----------------------------Avatar---------------------------------------
@Entity
@Table(name="AVATAR")
public class Avatar {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String nom;
    //@Size(max = 21844)
    @Lob
    @Column(name="AVATAR", length=32767)
    private String avatar;

    @OneToOne( mappedBy = "avatar" )
    private Compte compte = null;
----------------------------Combat----------------------------------------
@Entity
@Table(name="COMBATS")
public class Combat {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    Long date;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="arbitre_id" )
    private Compte arbitre  = new Compte();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="rouge_id" )
    private Compte rouge  = new Compte();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="blanc_id" )
    private Compte blanc = new Compte();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="ceintureRouge_id" )
    private Groupe ceintureRouge = new Groupe();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="ceintureBlanc_id" )
    private Groupe ceintureBlanc = new Groupe();

    int creditsArbitre;
    int pointsBlanc;
    int pointsRouge;
--------------------------Compte-----------------------------------------------
@Entity
@Table(name="COMPTES")
public class Compte implements UserDetails {
    private static final long serialVersionUID = 1L;
    @Id
    private String  username;
    private String  fullname;
    private String  password;

//Valeurs de 1 à 10. Utilisé lors des combats.
    private int     talent;
//Valeurs de 1 à 10. Utilisé lors des combats.
    private int     entrainement;
//Valeurs de 1 à 10. Utilisé lors des examens.
    private int     chouchou;

    private Long    anciendepuis;

//Identification
    @OneToOne(fetch = FetchType.LAZY  )
    @JoinColumn(name="avatar_id" )
    private Avatar avatar = new Avatar();

    @ManyToOne( fetch = FetchType.LAZY )
    @JoinColumn(name="role_id" )
    private Role role = new Role();

    @ManyToOne( fetch = FetchType.LAZY )
    @JoinColumn(name="groupe_id" )
    private Groupe groupe = new Groupe();

//Combats
    @OneToMany(  mappedBy = "rouge" )
    private Set<Combat> rouges  = new HashSet<>();

    @OneToMany(  mappedBy = "blanc" )
    private Set<Combat> blancs  = new HashSet<>();

    @OneToMany(  mappedBy = "arbitre" )
    private Set<Combat> arbitres  = new HashSet<>();

//Examens
    @OneToMany(  mappedBy = "evaluateur" )
    private Set<Examen> evaluateurs  = new HashSet<>();

    @OneToMany(  mappedBy = "evalue" )
    private Set<Examen> evalues  = new HashSet<>();
-----------------------Examen---------------------------------------
@Entity
@Table(name="EXAMENS")
public class Examen {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    Long    date;
    Boolean aReussi;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="ceinture_id" )
    private Groupe   ceinture = new Groupe();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="evaluateur_id" )
    private Compte   evaluateur = new Compte();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="evalue_id" )
    private Compte   evalue = new Compte();
--------------------------Groupe-----------------------------------
@Entity
@Table(name="GROUPES")
public class Groupe {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String groupe;

    @OneToMany( fetch = FetchType.LAZY, mappedBy = "groupe" )
    private List<Compte> comptes  = new ArrayList<>();

    @OneToMany( fetch = FetchType.LAZY, mappedBy = "ceintureBlanc" )
    private Set<Combat>  ceinturesBlancs  = new HashSet<>();

    @OneToMany( fetch = FetchType.LAZY, mappedBy = "ceintureRouge" )
    private Set<Combat>  ceinturesRouges  = new HashSet<>();

    @OneToMany( fetch = FetchType.LAZY, mappedBy = "ceinture" )
    private Set<Examen>  ceintures  = new HashSet<>();
---------------------------Role------------------------------------
@Entity
@Table(name="ROLES")
public class Role {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String role;

    @OneToMany(  mappedBy = "role" )
    private List<Compte> comptes  = new ArrayList<>();

